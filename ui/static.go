// Code generated by "esc -o ui/static.go -prefix ui/static -pkg ui -ignore tests ui/static"; DO NOT EDIT.

package ui

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/deck_list.js": {
		name:    "deck_list.js",
		local:   "ui/static/deck_list.js",
		size:    1463,
		modtime: 1563430695,
		compressed: `
H4sIAAAAAAAC/3RUUYvjNhB+z68Y1IWzuViRvT6WvbXzUK4lhcvTlYNSyq5WnsRqFClIirPdkP9eJNvJ
ZtvDkEgz33zzzWgkfNkZ66HBFd8rD0Jx5+ALis1X6TwcJwDCaOftXnhjkzRaAHwrHX1EBTU0Ruy3qD0V
FrnHXxSGXUL2iqQPV2AayQMv5U2TkAbFJlPS+R54mkwA1ugBB4oxmUW/t/pMc8Y6DLrFxiXx91pbNAV5
4f+tDou6Qfubx61LLnmvze+qpFJrtIvfl1+hfksfQQDUGeuThE/hOYV6DpxqvkWYw3NcpCNsy3fJsAZI
jhCcUxDcNu7RIm/+mYLGF/9osZN4eOQeToHvHALwVCk5n1QcWourmvx0cwwcJwJGCyXFpiZ8t6POc+u/
oXPS6OTDgPkwvTm+SXVKH8a+rrhy+EDmA7Ca8fmkamQXElfCNDi/OY6tC8K+ee5d8k72Ab5wj8m1/jQ9
VbPIMKlmkbHi/YTVxAWWTEm9IWM1vekHNbVmSHwu6L8VBMGuW8PLVmlXk9b73efZ7HA40MMtNXY9Kxhj
M9etCRxk49uaFCWBFuW69f06CP/ZvNSEAYOihKIkff+rHfctNDVZ5vdwu/gkspzmwLIC6H1WQNHlpWCQ
05zeQxG+Ni9FhECRBVtWfP8kWIjKQkT4Xpf3kN8t7rrsri26u9dtCazNiu9hl7Nx22VlW3TlK5m9V8KA
tUXZFeWCvRJYSaVqoo3GHlmFQkPjw3HOlJw/DYN0nse/jdQJIVeX4HLAbyZyvA9yBb0Z5sDSsfvR8jCJ
iPhWQCNXK6hjKGSX4Rieg8ASERXkjF14CO+4VPxZIWhzIAOjCpd8IOvjw+7PoQbCCHyEhq7R9ymmV44k
epZG+zZJ4SPkF/857te9Un8gt+9jo3Nh9tb9r2cp9d6jS/pu/hUvtzDbndGofXgFzhvqlBSYZEWaDjUN
BTeDh03hNh1Og5Kgk0Cfp/efnZ/HszpN/g0AAP//jQlJmbcFAAA=
`,
	},

	"/index.html": {
		name:    "index.html",
		local:   "ui/static/index.html",
		size:    455,
		modtime: 1563585442,
		compressed: `
H4sIAAAAAAAC/2xRsU4rMRDs7yv2bf3CKR1C9kmIUENBQ2nsDV7i8528mwv5e+RzElFQeUazO5rxmn+7
l6e399dniDqmoetMfSG5/GmRMg4dgInkQgUAZiR14KMrQmrxqPvNPUL/W8xuJIsL02meiiL4KStltXji
oNEGWtjTZiX/gTMru7QR7xLZ7WrVvJQ10bAjf4DHeTZ9401LnA9QKFkUPSeSSKQIsdDe4ug433kRBD3P
ZFHpW/uVrylN38pU+DGF88Ux8AIcLAbyB0HwyYlYrNEdZyrYxupXbNdM8mD6uL0s94GXa+yrkZAITxmH
v1V1KjetWrQsFYovPCtI8ZcyX7cu4xSOiepeGxo607ez/QQAAP//fSD4gMcBAAA=
`,
	},

	"/main.css": {
		name:    "main.css",
		local:   "ui/static/main.css",
		size:    3230,
		modtime: 1567396564,
		compressed: `
H4sIAAAAAAAC/5RX8W67NhD+n6ewftWkXyeMgECaEk3ae0zTZPARvBqb2aZJNvXdJ2xIwCGJKlWicN+d
P+6+uyONaTn6L0ColsLgmrSMnwukidBYg2L1fjJp9i8UKE260z74CoJS0rP1a8kJHxk1TYHe4niwDs/U
gYkCxYj0Rg5POkIpE4cCJVGaQ4viaLd7h3YfBAiVpPo4KNkLWqAXqKCus/1jQpwJwA2wQ2OGiFk+PKwk
l6pAL1mVb7fEkmySMGjSMGg2YdBkYdDkI+WJXowSNbD4zmlJPsa+ps3lJol2cTpE+wqCyDDDwUdsojR7
mxBaVb49j39xsdPb2NtL7GZza83SbLJmt9Z0u52s+a01GSpirbolnIdBZOBk/rI3PvpSt68g6MKglqqd
pRQb2RUovkoAl9IY2U5lt26czT0mQBxtL4ieh4Hk34o7U9gcxqE2i8N7jjgrONEGyxqbcwf2KO/ZKkHr
X0kKd3MylzIe5agOJfkZh2j8i+Ld64Jt3p3Q1nVNKRUFhRWhrNcFevd7aWo9QT4tBcp0x8m5QDUHCx2u
mDIFlWFSFENH9K2wPi1hYt3p714bVp9xJYUBYQpUgTCgnsQjNthty5Hik2lmgM7tTDSgmHGyH84hTICy
CG8u7L1xcGyYgfu5KeUJ64ZQeRwTneyyECXvWYjSJB/SneavKO5OKHNpDgOE0B1o4pBDQd7GTM/I/uoE
UjWM0/vyiDRozaT4Xn0QIpwdBGYGWn0twDzepdG8oHPMCxNdbyxqmlab3BdRHNnx67pknmohxSzT1/vF
YGylkLojFXhrIbkMtZGLpfLH0Eu//dB92TLz40/LDB+h/GAGk64Dooio4HqUz3pcK+72/qLwGXta2XRe
nroH9VOge+5yOAxBbAuzLAmF6gNzph1q+Adrc+az91gMn9j3GuffSiGvGFLUTK3PIzXuoSnjVyfKPudA
d7xbwEtgpA0xGnMmPpZUmLC7btLrqir92XrLQ38e3IhknC/38XiwBg6VwUoe1/vk8bnXjZGri+z8uOMW
XOheTcKfz/GFpuiOArxbwMs/PWgztbKV+nGUp5CqJfzpEh9JHRTpmmVTus8kHxKRE9P2Y8OitVHyA5ak
VvCDSm9Weur6ZyzA8wAranPqF1UzDHBtiDIrAdhQmk/CUUdMs2RdZjsg9JFPxVQ1fSI5os99rm/7xKMm
lZFqhRfZlLCr7nvcsnrm4XO6i3eXCyUHdzPjDnZGZnqBh/hVMWSjGOYSLiWne7/KLaOUrwS3Crn5PFq4
gnBF+L0FygjSlQIQiAiKfs5+H+SD8F+ttzdFb2cmQl/BV/B/AAAA///u4NSWngwAAA==
`,
	},

	"/main.js": {
		name:    "main.js",
		local:   "ui/static/main.js",
		size:    2799,
		modtime: 1567388687,
		compressed: `
H4sIAAAAAAAC/6xWTY+kNhC98ysqbA4gdZicp0WkyZeUKNpNdiLlOO2F6sE7NHZc7u1FLf575C/ADd0z
h9yQXfX86tVzGX6QQmn4GauXPzhp2CtxgLS4q7F6eWo56eIzpdvEh33ELxxPj0jERTfGKrv6RG45SnjU
TFMETGZlhpxULSOCBynhnABUoiOtjpUWKsvtCoBuOBV1YFhCh6eRcJZvp5gnE0RQQi2q4wE7XTyj/qVF
8/lj/1udpTYgXeYUTErs6p8a3tZZdF6BLj/fJlMSjWU5NmOZMR0bdouODUiXOUs644mrfFTUF8cp6lXE
K4ou6PjpwPVDRydUUALzHz8EPrPtzG1ex3pG/R6/6r+OSNoxYdR3FWS5AXTd9D0GGtmyE+PaH7dHXTUG
IzBe5zzm+i8XO0RCjjHX5XchFw3wZyxaEFOY2gAwmFYo7GqcTHviXS1OheikkKZ5COWFDK6vjTgZL1Oo
d/B9dSI1jBooA1grKmZ0Lczydn5Mw0kL1RcKZcsqNH7E7DxsIDXgD1KmG0jvQqF8D9k3BiN/hYypSh9V
kDcZs02y8aTS9A/XTZa+81ZeQbSXw2V4eiH8O8MqzUPlgC3hRb45Inj4AiJODm1whptVMh8i/rKT7lss
ak6yZb25Lse2XbPAZVzaiQ7T5W29FrecXkWYUAvPz3Sf1zGv3+RuoGKqpo/I6j6UZhoyrUJZlvB9PnZu
zSbySI33CBhUGDawcwPjHr49m6Vht4Hdu/C9MjHfIM4VGRdyv1HE+AJa3qWlf322rc6YhagL1UfX2t34
Rt/U0GbFEjqnz4T8H5V8qyGd4ivv1xUVp/3whC38OtPnQr0nhf+aByCTTDcbENKMLINxHoKUbrgpnJC9
uBY6TpzNLIVUiJdgbZ9pFj+Te+JsJGtR6Wz3K+Mt1qAFWFDTlClB2xdm9LUHDMa0xUTX0vP2cU6GUOb8
p2KWuTTQavbOKnwXXTSHsrTpazhK303OC3P0gLoR9T2kf354/Dt1w3J+ysr7frNahSTaL5heO2HjVz+J
ur+H3x8/vC9IK949832fncP/xZAvmMye/psEOvyqg9pDknjnMCn9j8+DlMYL03oRnuZt8l8AAAD//2Z0
FnDvCgAA
`,
	},

	"/review_session.js": {
		name:    "review_session.js",
		local:   "ui/static/review_session.js",
		size:    2440,
		modtime: 1565562564,
		compressed: `
H4sIAAAAAAAC/5xVzY7bNhC+6ykGbFHYwFZuEORSSwIKpEUPadF2e89ypbFNLE0q5MiOsdArtIeitz5d
nqTgj2RR6+waOewP6W++GX7zzbjWyhIQ7lvJCaGEu6zYIW/QVBlAsXtdvcX64XsobMsViKZkDdYPrCpW
7qIqVrvXAfim+s3orUFrp+A23k0D3lRZsRpyZMWeCwW15NaWzKK1QiuotSIuFBoWyF95sg8dWhJasQFO
giQ66t2rKnPAjTZ7DxWq7egnbfaeAKDwF+ePGPCO9EbXnfX/1XrfSiQsmd5s2CoJolOLJbPd/V4QgwOX
HZbs099/MfC4YuWyhvytz2DQdpLGKuMxco7ScGWPaG6JE7LqG3Vv2yjRDFdrY7CmHzz8CbJYtU5OJ2KV
3a2zDD+22hA0uOGdpFAD/IEHgcfbqO5jBuD7brqatFlE1Zf+AwDaCZu/RwklNLru9qgorw1ywh8lutOC
NeLAlusEnQul0Pz85y/voBz9NIN86NCcblGiT8u+OndpmWsVFIYSEMoq1gKAeWvwgIrehhctYl4AsYGF
pxY2iCPUdjnGDWkNWi0PGBDn4B5QWnyC3iL9ih/p9+i0Cd7/7d2xd63eIgFGOYakBqkzanzuiLXo+lE/
LNyvucpPRPHztUzkdFcJW+zY5c4NQ1QOsGkXDKpm0OFM55WPEtVcyns+L3QKgRIGUEIzF+8y0wx1iWys
cho46bJzmOkSd3Vtwwn9NE0el15HtrDyHmFYJzdAmri8AYkbuoEwl+9QQe/yTCVdZ9lgPIeFsizhu7Pl
jkI1+pjvhCVtTrl70tlAwRzh1GfPW2DcmqkN7r5+9JXCt77UfhXP/d0LczYuzpRvuH4herqoUgLmlxF7
IT5dYF/CEFb2Mrd0kpgfRUO7IMfYq77e3V1J4he4S31tVv8tMTEVtydVw3yxJObiw5xcV836SahX+7n4
pCnT+ETt5xhmbVlnnxu1DZc2KTF8oUEJ/MgFXVgQi1BdrMuNSwjJhX0f056nZvKS1Bqf/vuHrS+Aggtq
LbV7H9saRDUCk1d93mqz9f9MDf9eU4PB5ooKoggRMKwC99Nn/wcAAP//fC4cfogJAAA=
`,
	},

	"/stats_graph.js": {
		name:    "stats_graph.js",
		local:   "ui/static/stats_graph.js",
		size:    2917,
		modtime: 1567396628,
		compressed: `
H4sIAAAAAAAC/5RW3W7jNhO991MMCH8AlbUl2V9yk1guWmzdvUiKAim6GxRFrUi0zEIWDWpsayHo3Qv+
SKLsjZu9cULO8JwzR+SQrNoLiZCyTXzIEZI8Lkt4xhjLX2S830I9AkhEUaI8JCgk9fQMAG556f/Ncogg
Fclhxwr0E8liZD/nTI1+faZki7i/D4LT6eSf/u8LmQXzMAyD8piRCRD1x3sYoPma/5GX6MdpSkmphEwz
pcSkNqMRQMYQmGHp9EiGB1l0QF1uyRA0CtW/Q/l6CiKT4CqRrEiZ1A7Qnnc4bZG0OdAiObgPTjgRhwJb
Ij9nRYZbE+cboCa6gLlny3gYOWtPPMVtB6094qzAz2ra5dgynm3xMvGTnj/zuWT4I6LkrwdklBw5O/0k
KjKBdQghjGvN2cC4NqDN2htI2sUy4wVEUAOK/T3MwgnkbIP3MLubgFRLzOSrQBQ7NQ2Nq5UXBZOfbWGm
wKlF9RVQP5K9eGfpp7ZWW3SXjmLfDwz7QHmJscQv7Zf4M/zLH34oVqR91HyXKczOs8okzpnKc+oIgOrF
U8vhuQtUrtofS6BY9ilwY6HO3K1eIIKnGLf+Lq6o7/tm3+ziPaU18AKZPMY5NJ5CbIeeBx9gdiHzpZVp
PQsMcMJ4ThXTQKdJtvBKrdYy7TlaxS/nilfXFG9i1TusXjN4Q+3qutrVQO1GybXYVuwKpi1BK3U1kLqP
ncM0EInlxLF2AjytlF69FtQIoiiCEH6A9dO4/kKx9JrJuH6hnTnNGu5h/fhWUCMNC/jtqprWtndr2bxQ
W/ylFDfWKnGkpOK8f2kllvHCHv0l14uEyyRnkFQRaakIJF/VyC2dgIzIHQmW3/Lg43uYBzvoKq9T5yWt
w3uM8wP73pJtDGC9QFYhDPjPy1adI2zIclzn8SvLHT8WgVr9TTf+eJ8s14//FtV70msyEz6KFa9YSueX
qoY3hjmVvz89QgTr0SIDlHFRboTcRUT/m8fI6Lh2urjadn1fbjyipC4y88iISFzxkhj1i5wXDKpZREIC
X2dKs9MFGgLVvJvT7VZVNr9IWy4CBWQxWzNC64LbVz7A7E7bULATfFTKrYv2griBWRiGxgkfxaNQnUTl
PaPkRUY7t4ZU5xLfTauvju8hXQTZcjSwU7+S7MZobdXdLtVbQLUa/x/BC0qI15DAZIxrff6admC2X3OF
oN3FlxT7NxhSh+A4xFc/a/O+akajzaFIkIsCzs5L/wiFrThIdTq6INzA/NbrtrE+TLaj8aN6IOgFAcxv
+8hOpF3kfzZi34/me1ATW0Ywv1U9dlzrW2iTCyFpyo9ek4JqsISoW4wqvKXpxuN6J9Jma4MjfY6a0b8B
AAD//xIbl/xlCwAA
`,
	},

	"/stats_list.js": {
		name:    "stats_list.js",
		local:   "ui/static/stats_list.js",
		size:    2138,
		modtime: 1567388934,
		compressed: `
H4sIAAAAAAAC/5RVTW/cNhC961cMaBeQ2kYKnD3ZkorALpoAziXuzVhEhDhaMdGSKkWtGyz03wt+6Gu9
cdzLQho+vnlvZnbE961UGh401d1firY1VErugcRJZ0JfdiYWf+3ITRCUUnQaNO7bhmqEDIogrZEyVHkA
kNbv8jssv11D2rVUAGcZsRwmSPI0MdE8Tep3Fs34AcqGdp1HvemwwVK/UfKJGIAh3OS3VLHuGtKk3vig
g83s97zTlt3GLXXC+CEP0mTUFqR7ysWYrZRCUy5QkVH1ba8UCl8EqKQ6dWBUnDgwV/vGa2q4ezDytJJi
l9/TTsNnPHB8QgbvtbHgjybkmEJ52Hs95XC0ych7JsFHoVEdaPMSMfeY/0F7x6uKl32jv79EzCbUeeo0
MaVJE1P2PChuggD/tWPGsKJ9o10rXL1N/+AYANjpUn2ppQojGwHQNe/iL9hABkyW/R6FjkuFVOOfDZq3
kDB+INHNCh1zIVB9+PvTPWTTuC4hdqghA4FPi8kPT2n+6VF9f7BzJVVIjBsSxbRtUbDbmjcsXNDF6BRZ
ksHMxw41+OBkSKHulZhSTNgOTXHKb6H5OXV/KuRi/ltFK6/m8orSAkP7uya1IcgcYGlboWCoPmrcd+Fs
ZR32TG4djEwLXsfHK3CZ4wbFTteQZRm8jXwJboJF0la2vemRs+j1Plf1MLt5fLuNVhQ/qpJdD1EsRVlT
sTNLKzyCpso0Z4ggy72ZpZ2xLnHFBQvDI5RUMY+2j8aJ44gPtOnRa/2RWn88zOU8a/hVXfd+ll23cS8g
3tP2RHGRylZzKfLLo4kOaeLfi2i89FVyERLyrN/OgmP73Xd6WLd/3DGQwSeq61jJXrDwagO/OvwjGTcV
2fo6rC8+aMXFDjKvJZwI8wyuNvAHFJdHy1w1Uqr5OIGrTTQwKOAaCIngN09QXB4nzC9wtRnq4lWDYnf8
urDG9ssr4WKxu9d3zWq5oxpDL8sXw3wXPs93tvY0irW8lyVt0BXjZ4voYlrs65zrkv6EY7HDz4zTI5m/
BGT7bHfGq/3xSD7wTkvFS9NlN0RD8F8AAAD//66NtblaCAAA
`,
	},

	"/": {
		name:  "/",
		local: `ui/static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"ui/static": {
		_escData["/deck_list.js"],
		_escData["/index.html"],
		_escData["/main.css"],
		_escData["/main.js"],
		_escData["/review_session.js"],
		_escData["/stats_graph.js"],
		_escData["/stats_list.js"],
	},
}
