// Code generated by "esc -o ui/static.go -prefix ui/static -pkg ui -ignore tests ui/static"; DO NOT EDIT.

package ui

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/deck_list.js": {
		name:    "deck_list.js",
		local:   "ui/static/deck_list.js",
		size:    1463,
		modtime: 1563430695,
		compressed: `
H4sIAAAAAAAC/3RUUYvjNhB+z68Y1IWzuViRvT6WvbXzUK4lhcvTlYNSyq5WnsRqFClIirPdkP9eJNvJ
ZtvDkEgz33zzzWgkfNkZ66HBFd8rD0Jx5+ALis1X6TwcJwDCaOftXnhjkzRaAHwrHX1EBTU0Ruy3qD0V
FrnHXxSGXUL2iqQPV2AayQMv5U2TkAbFJlPS+R54mkwA1ugBB4oxmUW/t/pMc8Y6DLrFxiXx91pbNAV5
4f+tDou6Qfubx61LLnmvze+qpFJrtIvfl1+hfksfQQDUGeuThE/hOYV6DpxqvkWYw3NcpCNsy3fJsAZI
jhCcUxDcNu7RIm/+mYLGF/9osZN4eOQeToHvHALwVCk5n1QcWourmvx0cwwcJwJGCyXFpiZ8t6POc+u/
oXPS6OTDgPkwvTm+SXVKH8a+rrhy+EDmA7Ca8fmkamQXElfCNDi/OY6tC8K+ee5d8k72Ab5wj8m1/jQ9
VbPIMKlmkbHi/YTVxAWWTEm9IWM1vekHNbVmSHwu6L8VBMGuW8PLVmlXk9b73efZ7HA40MMtNXY9Kxhj
M9etCRxk49uaFCWBFuW69f06CP/ZvNSEAYOihKIkff+rHfctNDVZ5vdwu/gkspzmwLIC6H1WQNHlpWCQ
05zeQxG+Ni9FhECRBVtWfP8kWIjKQkT4Xpf3kN8t7rrsri26u9dtCazNiu9hl7Nx22VlW3TlK5m9V8KA
tUXZFeWCvRJYSaVqoo3GHlmFQkPjw3HOlJw/DYN0nse/jdQJIVeX4HLAbyZyvA9yBb0Z5sDSsfvR8jCJ
iPhWQCNXK6hjKGSX4Rieg8ASERXkjF14CO+4VPxZIWhzIAOjCpd8IOvjw+7PoQbCCHyEhq7R9ymmV44k
epZG+zZJ4SPkF/857te9Un8gt+9jo3Nh9tb9r2cp9d6jS/pu/hUvtzDbndGofXgFzhvqlBSYZEWaDjUN
BTeDh03hNh1Og5Kgk0Cfp/efnZ/HszpN/g0AAP//jQlJmbcFAAA=
`,
	},

	"/index.html": {
		name:    "index.html",
		local:   "ui/static/index.html",
		size:    455,
		modtime: 1563585442,
		compressed: `
H4sIAAAAAAAC/2xRsU4rMRDs7yv2bf3CKR1C9kmIUENBQ2nsDV7i8528mwv5e+RzElFQeUazO5rxmn+7
l6e399dniDqmoetMfSG5/GmRMg4dgInkQgUAZiR14KMrQmrxqPvNPUL/W8xuJIsL02meiiL4KStltXji
oNEGWtjTZiX/gTMru7QR7xLZ7WrVvJQ10bAjf4DHeTZ9401LnA9QKFkUPSeSSKQIsdDe4ug433kRBD3P
ZFHpW/uVrylN38pU+DGF88Ux8AIcLAbyB0HwyYlYrNEdZyrYxupXbNdM8mD6uL0s94GXa+yrkZAITxmH
v1V1KjetWrQsFYovPCtI8ZcyX7cu4xSOiepeGxo607ez/QQAAP//fSD4gMcBAAA=
`,
	},

	"/main.css": {
		name:    "main.css",
		local:   "ui/static/main.css",
		size:    2474,
		modtime: 1567384408,
		compressed: `
H4sIAAAAAAAC/5RWf2+zNhD+35/CeqtJbyeMgECaEk3a95imycFHuNXYzDb5sSnffcJAAiRpValSC/fc
3dO75+6oXC3pf4TSUivHSl6jPOfUcmWZBYPldjRZ/BdymsTNaUsuhOy0OHu/mp/YEYWrcvoWRZ21e2f2
qHIaUd463b1puBCo9jmNwySDmkbhZvMO9ZYQSne8+Ngb3SqR0xcooCzT7eeEJCpgFeC+cl3ENOteFlpq
k9OXtMjWa+5JVnFAqiQg1SogVRqQKhsoj/QiGpuOxXeyxdkQ+1a2vjZxuImSLtqFkNChk7BErMIkfRsR
1hRLexb90sdO7mOvr7Gr1b01TdLRmt5bk/V6tGb31rjriLfamksZkNDByf3lH5boa98uhDQBKbWpJyVl
Tjc5jW4SYDvtnK7Htns3iVOPERCF6yuilQHR8ltxJwqbwiSUbpa8lVRiLrl1TJfMnRvwqRbvHhL0/oUW
8LQmUymzQY5mv+M/o4AOP2G0eZ2xzZoTXfdTs9NGgGGGC2xtTt+XszSOnuIHT0GgbSQ/57SU4KHdbybQ
QOFQq7ybiLZW3qfmqB47/d1ah+WZFVo5UC6nBSgH5ot43Ae7HzmeH9CiAzG1o6rAoOtl3+XhqMB4xGIv
bBfr4Fihg+e12ekTsxUX+jgUOt6kAY3f04AmcdaVO8leadScaNqXOSCU0ifQuEd2DXkbKj0h+2svkKJC
KZ7LI7RgLWr1vf5QyiXuFUMHtb01YBrvOmiLoFPMC6qmdR41bqtVthRRFPr120/JtNRKq0mlb8+zxVhr
pW3DC1ichfi61AYunsof3Sz99sO2uxrdjz89M3aE3Qc6xpsGuOGqgFuqJevhrPSPzw/FkvFCK6tmUafm
k/4ZsK3sa9gtQeYbM2+JgOKDSbQ9qvuDWXeWk/9jtnyipdew/x408obheYnm8T4ywx0aK35zEniYAvv0
/QGeA0PruLNMovqYU0Hlb92o14eqXO7Wex72sO9XJEo5v8dDYgsSCseMPj6ek8/z3i5GZq6yW8YdruBM
92YU/nSPzzQlNgLg3QNe/mnBunGUvdSPgzyVNjWXXx7x32sQyKktDICiXAn6c/KtlHXfSq/ed6Goe/1Q
eiEX8n8AAAD//5c684eqCQAA
`,
	},

	"/main.js": {
		name:    "main.js",
		local:   "ui/static/main.js",
		size:    2799,
		modtime: 1565563785,
		compressed: `
H4sIAAAAAAAC/6xWTY+kNhC98ysqbA4gdZicp0WkyZeUKNpNdiLlOO2F6sE7NHZc7u1FLf575C/ADd0z
h9yQXfX86tVzGX6QQmn4GauXPzhp2CtxgLS4q7F6eWo56eIzpdvEh33ELxxPj0jERTfGKrv6RG45SnjU
TFMETGZlhpxULSOCBynhnABUoiOtjpUWKsvtCoBuOBV1YFhCh6eRcJZvp5gnE0RQQi2q4wE7XTyj/qVF
8/lj/1udpTYgXeYUTErs6p8a3tZZdF6BLj/fJlMSjWU5NmOZMR0bdouODUiXOUs644mrfFTUF8cp6lXE
K4ou6PjpwPVDRydUUALzHz8EPrPtzG1ex3pG/R6/6r+OSNoxYdR3FWS5AXTd9D0GGtmyE+PaH7dHXTUG
IzBe5zzm+i8XO0RCjjHX5XchFw3wZyxaEFOY2gAwmFYo7GqcTHviXS1OheikkKZ5COWFDK6vjTgZL1Oo
d/B9dSI1jBooA1grKmZ0Lczydn5Mw0kL1RcKZcsqNH7E7DxsIDXgD1KmG0jvQqF8D9k3BiN/hYypSh9V
kDcZs02y8aTS9A/XTZa+81ZeQbSXw2V4eiH8O8MqzUPlgC3hRb45Inj4AiJODm1whptVMh8i/rKT7lss
ak6yZb25Lse2XbPAZVzaiQ7T5W29FrecXkWYUAvPz3Sf1zGv3+RuoGKqpo/I6j6UZhoyrUJZlvB9PnZu
zSbySI33CBhUGDawcwPjHr49m6Vht4Hdu/C9MjHfIM4VGRdyv1HE+AJa3qWlf322rc6YhagL1UfX2t34
Rt/U0GbFEjqnz4T8H5V8qyGd4ivv1xUVp/3whC38OtPnQr0nhf+aByCTTDcbENKMLINxHoKUbrgpnJC9
uBY6TpzNLIVUiJdgbZ9pFj+Te+JsJGtR6Wz3K+Mt1qAFWFDTlClB2xdm9LUHDMa0xUTX0vP2cU6GUOb8
p2KWuTTQavbOKnwXXTSHsrTpazhK303OC3P0gLoR9T2kf354/Dt1w3J+ysr7frNahSTaL5heO2HjVz+J
ur+H3x8/vC9IK949832fncP/xZAvmMye/psEOvyqg9pDknjnMCn9j8+DlMYL03oRnuZt8l8AAAD//2Z0
FnDvCgAA
`,
	},

	"/review_session.js": {
		name:    "review_session.js",
		local:   "ui/static/review_session.js",
		size:    2440,
		modtime: 1565562564,
		compressed: `
H4sIAAAAAAAC/5xVzY7bNhC+6ykGbFHYwFZuEORSSwIKpEUPadF2e89ypbFNLE0q5MiOsdArtIeitz5d
nqTgj2RR6+waOewP6W++GX7zzbjWyhIQ7lvJCaGEu6zYIW/QVBlAsXtdvcX64XsobMsViKZkDdYPrCpW
7qIqVrvXAfim+s3orUFrp+A23k0D3lRZsRpyZMWeCwW15NaWzKK1QiuotSIuFBoWyF95sg8dWhJasQFO
giQ66t2rKnPAjTZ7DxWq7egnbfaeAKDwF+ePGPCO9EbXnfX/1XrfSiQsmd5s2CoJolOLJbPd/V4QgwOX
HZbs099/MfC4YuWyhvytz2DQdpLGKuMxco7ScGWPaG6JE7LqG3Vv2yjRDFdrY7CmHzz8CbJYtU5OJ2KV
3a2zDD+22hA0uOGdpFAD/IEHgcfbqO5jBuD7brqatFlE1Zf+AwDaCZu/RwklNLru9qgorw1ywh8lutOC
NeLAlusEnQul0Pz85y/voBz9NIN86NCcblGiT8u+OndpmWsVFIYSEMoq1gKAeWvwgIrehhctYl4AsYGF
pxY2iCPUdjnGDWkNWi0PGBDn4B5QWnyC3iL9ih/p9+i0Cd7/7d2xd63eIgFGOYakBqkzanzuiLXo+lE/
LNyvucpPRPHztUzkdFcJW+zY5c4NQ1QOsGkXDKpm0OFM55WPEtVcyns+L3QKgRIGUEIzF+8y0wx1iWys
cho46bJzmOkSd3Vtwwn9NE0el15HtrDyHmFYJzdAmri8AYkbuoEwl+9QQe/yTCVdZ9lgPIeFsizhu7Pl
jkI1+pjvhCVtTrl70tlAwRzh1GfPW2DcmqkN7r5+9JXCt77UfhXP/d0LczYuzpRvuH4herqoUgLmlxF7
IT5dYF/CEFb2Mrd0kpgfRUO7IMfYq77e3V1J4he4S31tVv8tMTEVtydVw3yxJObiw5xcV836SahX+7n4
pCnT+ETt5xhmbVlnnxu1DZc2KTF8oUEJ/MgFXVgQi1BdrMuNSwjJhX0f056nZvKS1Bqf/vuHrS+Aggtq
LbV7H9saRDUCk1d93mqz9f9MDf9eU4PB5ooKoggRMKwC99Nn/wcAAP//fC4cfogJAAA=
`,
	},

	"/stats_list.js": {
		name:    "stats_list.js",
		local:   "ui/static/stats_list.js",
		size:    2187,
		modtime: 1565563759,
		compressed: `
H4sIAAAAAAAC/5RVTW/bRhC981cMti5AtgkZODrZJIsgLpAAziXuzRDKBTkSt6F21eVQbqDwvxf7wS9F
keOLIA7fvHlvZjQqlWwJCHf7hhNCBkWQ1sgr1HkAkNZv8zssv9xA2u65BFFlrCVOrQmyPE1MNE+T+q1F
V+IAZcPb1qNet9hgSa+1emIGYAhX+Xuuq/YG0qRe+aCDTez3oiXLbuOWOqnEIQ/SZNAWpDsu5FCtVJK4
kKjZoPp9pzVKggfDBxulTx0YFScOTGrXeE2NcF+MPNJKbvN73hJ8xoPAJ6zgHRkL/tWIHEpoD3tHYw1H
mwy8Zwp8lIT6wJtLxMJjXkB7JzYbUXYNfb1EXI2oF1B/EC0pLcrLmusRdZ46TUzX08RMNA+K2yDA//ZK
E1S44V1DbspulGY14BgA2MXVXUlKh5GNAFAt2vhvbCCDSpXdDiXFpUZO+GeD5ilklTiw6HaBjoWUqD/8
9ekesvGXYCC92YgtEqDPHupopE7LkWDEtmg0l19C83EqKv63Q/31wa600iH7ZfohRQsJJnlBaYGh/VyS
2hBkDjA3pVFWqD8S7towGrmWYc/kDsDANON1fGIDrnLcoNxSDVmWwZvIt+A2mBXdq31nWucser3fq3qY
3Dy+WUcLih91yR6EKFayrLncmjMVHoG4NsPpI8hyb2ZuZ+hLvBGyCsMjlFxXHm2/GieOIz7wpkOv9Udq
/et+audZwz81de9nPnUb9wLiHd+fKC5StSehZH51NNE+TfxzEQ1J/yghQ8a+m7ez4Nhe+Un3y/EPVwUy
+MSpjrXqZBVer+A3h39kw21ia9+HZeIDaSG3kHkt4UiYZ3C9gj+guDpa5k2jlJ5eJ3C9ivoKCrgBxiL4
3RMUV8cR8ytcr/q6+KlFsVd92Vhj+/Zy6uxaL3MlPsEdJwy9LN8M80/wecpZ27dRTOpelbxB14wweqbq
eMqXNZctfYZjdrXPrNMjm24/Wz9DNbvSS6oT89PNZ2v49g0evf2T3R3H5/Z3eDzZ1lcw7Gsf/B8AAP//
IpN7y4sIAAA=
`,
	},

	"/": {
		name:  "/",
		local: `ui/static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"ui/static": {
		_escData["/deck_list.js"],
		_escData["/index.html"],
		_escData["/main.css"],
		_escData["/main.js"],
		_escData["/review_session.js"],
		_escData["/stats_list.js"],
	},
}
