// Code generated by "esc -o ui/static.go -prefix ui/static -pkg ui ui/static"; DO NOT EDIT.

package ui

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/deck_list.js": {
		name:    "deck_list.js",
		local:   "ui/static/deck_list.js",
		size:    1463,
		modtime: 1563430695,
		compressed: `
H4sIAAAAAAAC/3RUUYvjNhB+z68Y1IWzuViRvT6WvbXzUK4lhcvTlYNSyq5WnsRqFClIirPdkP9eJNvJ
ZtvDkEgz33zzzWgkfNkZ66HBFd8rD0Jx5+ALis1X6TwcJwDCaOftXnhjkzRaAHwrHX1EBTU0Ruy3qD0V
FrnHXxSGXUL2iqQPV2AayQMv5U2TkAbFJlPS+R54mkwA1ugBB4oxmUW/t/pMc8Y6DLrFxiXx91pbNAV5
4f+tDou6Qfubx61LLnmvze+qpFJrtIvfl1+hfksfQQDUGeuThE/hOYV6DpxqvkWYw3NcpCNsy3fJsAZI
jhCcUxDcNu7RIm/+mYLGF/9osZN4eOQeToHvHALwVCk5n1QcWourmvx0cwwcJwJGCyXFpiZ8t6POc+u/
oXPS6OTDgPkwvTm+SXVKH8a+rrhy+EDmA7Ca8fmkamQXElfCNDi/OY6tC8K+ee5d8k72Ab5wj8m1/jQ9
VbPIMKlmkbHi/YTVxAWWTEm9IWM1vekHNbVmSHwu6L8VBMGuW8PLVmlXk9b73efZ7HA40MMtNXY9Kxhj
M9etCRxk49uaFCWBFuW69f06CP/ZvNSEAYOihKIkff+rHfctNDVZ5vdwu/gkspzmwLIC6H1WQNHlpWCQ
05zeQxG+Ni9FhECRBVtWfP8kWIjKQkT4Xpf3kN8t7rrsri26u9dtCazNiu9hl7Nx22VlW3TlK5m9V8KA
tUXZFeWCvRJYSaVqoo3GHlmFQkPjw3HOlJw/DYN0nse/jdQJIVeX4HLAbyZyvA9yBb0Z5sDSsfvR8jCJ
iPhWQCNXK6hjKGSX4Rieg8ASERXkjF14CO+4VPxZIWhzIAOjCpd8IOvjw+7PoQbCCHyEhq7R9ymmV44k
epZG+zZJ4SPkF/857te9Un8gt+9jo3Nh9tb9r2cp9d6jS/pu/hUvtzDbndGofXgFzhvqlBSYZEWaDjUN
BTeDh03hNh1Og5Kgk0Cfp/efnZ/HszpN/g0AAP//jQlJmbcFAAA=
`,
	},

	"/index.html": {
		name:    "index.html",
		local:   "ui/static/index.html",
		size:    392,
		modtime: 1563431361,
		compressed: `
H4sIAAAAAAAC/2SQsW4zIRCE+3uK/bf/g9xFESBFceqkSJOSwNqQ47gTu7Zybx9xnN2kYlczO/oG/e/4
9vLx+f4KUaZsh0G3F7IrZ4NU0A4AOpILbQDQE4kDH11lEoMXOf1/RFB26KokyWSP5Ed4Xhat+t61nMoI
lbJBljUTRyJBiJVOBieXyoNnRpB1IYNCP6K2XW0AqhO08WsOK/jsmA2eq+CeXtwVUjAYyI+MN4Ofi7hU
qO621uWw8fGTVvGwH6virrcKIfUgJuY0F7RahfRXFSd811pE4+qE7GtaBLj6vdj3vdc0h0umdtdNdtCq
//tvAAAA//8nH9N4iAEAAA==
`,
	},

	"/main.css": {
		name:    "main.css",
		local:   "ui/static/main.css",
		size:    3274,
		modtime: 1563425731,
		compressed: `
H4sIAAAAAAAC/7RX3W6rOBC+5yks9eZUCggSSFLOzb6KwUPijbE5tmnIrvLuK2wINvi0uxerVqoznvnm
/4ubXKRGf0cItXiI75Toa4lOadoNPyOEGsF13OCWskeJFOYqViBp87pS9C8o0T6z2oxyiK9AL1ddokNh
hR0mhPJLifb7UfCMjMNrZnw6IPkhAHI8WWGL5YXyuBJai3bGnqASTTWDNVxRBODOxfdw1/0a6pAHoIrc
g9KiK1ERjtZP/LCG358C8HkA/hCOPstd+HwD/1VzjN59ElaCkQD+hwPf7ezfnk0HMR8qJurbr15omASd
nE8JZiD1/IEvKkklhvnYCKHHKzXN4pJ2+l3HnGBcYwaNXmky6ioEC7jkYVSn6Z3AbCcRqoQkIGOlHwxK
pASjxBHXgglZInmp8I90h6bfJCveHaVp01Lz45ZY9dVuPnVuDKNy5ijWgmxrfavIegCyj5WRUahwfbtI
0XPyu3jT87u3v0U3oKOXv8SE9mqakLms6zA7CX4WWf7/F3EuwzbLt6Zp/mVaL+kQqysm4m49HbsBpZvA
chtYuAZfboBfHY8sVlvhNjVEGofUo1y7PquZNbKsGxARWgMJF3jrvgstjhdrz5ZF7NlCDIJ5CxogjESO
4b+4xbkYt+4lt0VEJcNKx/WVMuIWNCQfixsQL1k5l6H80jG5P1ogFCPMGMKcoB8t5a+vyVPaDe/G8vUt
6rRyJtln9IyiSpCH42OcENxrMd7Pk5nXxfGIf3pjW6I3qKFp8jGUiONPg0Go6hh+lKhhYHmcwRATKqHW
VPByhOxbbmxaTHnY6M9eado84lpwDVyXqAauQX6Dhw3YOuZnhMtPqug4Us495VeQVBvDZPSDKQe5YbXk
mJ2hXWd+v1INv6cbdy/NFGfnfIeyj3yH9lkxzvK+eEdpN6DcrvjOtCesmlnNkQxOdqijRIFSVPD/VnGE
MKMXHlMNrVpK6uI1QrYhUFfnjfKutxP1mwdVLK042xaOC+7UbfnsveZawYXqcA3WsQTVM+tQw6Bjk4Uf
P4H6FjOqtD/HHpumlpSUnnnd+vbNp6/hQPqLDi4bKpWORRPrRwfuerqJ+0aEfm5fAHbNfMVEaaxVzCi/
+aFQbhh17nKwlyv8QBzq82IJmzLmLUk0OVbAoNaxFPfwdH3t98VPSSFn5xvc6SW40I3VHg/GIvASKNEb
OROAD6Pw9qsHpecF8F6KXMgWM6M10aOqJQCfGHL5R6JIF4bc9P+rJXpGvgn2yXWegZ4r0DPH/hMAAP//
H15l3soMAAA=
`,
	},

	"/main.js": {
		name:    "main.js",
		local:   "ui/static/main.js",
		size:    2767,
		modtime: 1563432096,
		compressed: `
H4sIAAAAAAAC/6xWTW/jNhC9+1dMtT1IgMv0HEMF0i+gRbHbbgr0GHOlScSNLLIcer2Cof9e8EsSLTnJ
oTdhPPP45s3j0OKgpDbwM1bPfwgy8KjlATJ2U2P1/NAKMuwzZbtNSPuIXwSe7pFIyG7M1S76QD6cFNwb
bigBJhuZIW+qlhPBnVJw3gBUsiOjj5WROi9cBMA0glgdGZbQ4WkknBe7KefBJhGUUMvqeMDOsCc0v7Ro
P3/sf6vzzCVkyxrGlcKu/qkRbZ0n5zH09cVuMxXR2JZnM7aZ0nFpL9FxCdmyZklnPHGVj07m4jkls0p4
JdmMjp8Owtx1dEINJfDw8UPkM/s59z9ex3pC8x6/mr+OSMYz4dR3FeSFBfTTDDMGGtnyExcmHPeIpmos
RmS8znmsDV8+d0iEHHOuy+9TLgYQzliMIKUwjQFgsKPQ2NU4mfYkulqemOyUVHZ4COWFDH6ujTxZL1Ps
dwhz9SI1nBooI1grK251ZTa8mx/TCDJS90yjanmF1o+Yn4ctZBb8TqlsC9lNbFQ8Qv6NxSheIWO7Mkcd
5d2M1bbYelIb+keYJs/eBSuvILrL4SsCvZj+nWWVFbFzwJbwot4eET18AZEWxzF4w806mS+RcNnJ9C2y
WpBqeW+vy7Ft1yxwmZd1ssNseVuv5S23F4sbauH5me7zPub929otVFzX9BF53cfW7ECmKJRlCd8X4+TW
bKKO1ASPgEWFYQt7vzBu4duzDQ37Lezfxe+VjfkGca7IuJD7jSKmF9DxLh3967ttdccsRF2oPrrW/Zre
6Bc1dFWphN7pMyH/RyXfakiv+Mr7xeITtfDjrP8LdR40/msXfK64abYglV1JFuM8RKn88tI4IQfxHHRa
ONtJGonJ52jdUGmDn8k/YS6Tt6hNvv+VixZrMBIcqBV9KjDuBRl9GwCj8VwzybULvEOelyG2Of/TMKtc
GmS1eu8UvkkukkdZ2vA1HG1uJmfFPXlA08j6FrI/P9z/nfllOD9l5f1+sVuNJNsvmF07YRuin2Td38Lv
9x/eMzJadE/isc/P8f/DUCyYzJ72Fwl0+NVEtYfNJjiHKxX+2NwpZb0wxVl8eneb/wIAAP//oFoS6c8K
AAA=
`,
	},

	"/review_session.js": {
		name:    "review_session.js",
		local:   "ui/static/review_session.js",
		size:    2450,
		modtime: 1563431717,
		compressed: `
H4sIAAAAAAAC/5xVzY7jRBC++ylKDUKJNDisuBE7EtKCOCwIGO6bnnYlaU2n29tdTjYa+RXggLjxdPsk
qH/suDPZmYjDTNztr/6++qosjHYEhPtWcUKoYV1UO+QN2lUBUO2+9T8Ab1E8fgeVa7kG2dSsQfHIVtXC
X0RE9WDjw6/WbC06N4W36W5qUi2882oxRCuqPZcahOLO1cyhc9JoEEYTlxoti/m8Cf4+dOhIGs0GOElS
6L3v3qwKD9wYuw9QqduOfjR2z1Ke4eL8igHvyGyM6Fx4EmbfKiSsmdls2CIzolOLNXPdw14SgwNXHdbs
019/MljEinzUGL8NESy6TtGYZTomnyM7XLsj2nvihGz1lX5wbUbsiBPGWhT0fYA/Q1aL1tPpSVwV62VR
4MfWWIIGN7xTFHOA3/Eg8Xif2H0qAIICbCfI2FlifR5eANBOuvI9KqihMaLbo6ZSWOSEPyj0pxlr5IHN
lxm6lFqj/emPn99BPSrrAvKhQ3u6R4UhLPvi3KV5aXRkGGpAqFcpFwAsW4sH1PQ2VjRLcQHkBmbBtXSR
HKm389FuCGvRGXXAiDgb94DK4TP0FukX/Ei/JaVN8OG398fet3qLBJjoGIJapM7qsdwR69D3QzzO/L9L
lp+REoZsntHprzJvqWPXOzcMUT3Apl2wqJuBh7O7wHyiSHClHvhlolMI1DCAMjeX5F33dIG65mzMcmo4
6bJXmO0ydXVtwwnDNE2Ky6+Tt7j8nmBYJ3dAhri6A4UbuoM4l+9QQ+/jTCldFsUgPI+Fuq7hm7PkjlI3
5ljupCNjT6Uv6SygKI546ouXJTAuzlwG6y+fQqbwdUi1X6Rzv35lzsbFmfsbrl+xni6q3AELy4i9Yp8v
sP/jIa7seenopLA8yoZ2kY6xV73YrW90Eha4D31r1PCVmIiKu5MWcLlYMnHxYU5uy2b5zDSw/ZJ91pSp
fcb2Sx4u2rIsPjdqG65clmL8oEEN/MglXVkQs5hdysuPSzQppXufwp6nZlJJLo1P//7NlldAUQXCKOPr
Y1uLqEdgVtXnpXax/l/I4Z9bcrDY3JBBIiEBhlXg//rivwAAAP//T9Dqn5IJAAA=
`,
	},

	"/stats_list.js": {
		name:    "stats_list.js",
		local:   "ui/static/stats_list.js",
		size:    2212,
		modtime: 1563431733,
		compressed: `
H4sIAAAAAAAC/5RVTW/bRhC981cMti5AtgkZODrZJIsgLpAAziXuzRCqBXckbkPtqsuhVEPRfy/2gxTJ
OFZyEcTZt2/emxkOK61aAsLtruGEUMAqymvkAk0ZAeT12/IOqy83kLc7rkCKgrXEqbVBVuaZjZZ5Vr91
aCH3UDW8bQPqdYsNVvTa6AOzAEu4KN9zI9obyLN6EYIedma/ly05dhd31JmQ+zLKs15blG+5VH22Sivi
UqFhver3nTGoCB4sH6y1mTuwKmYO7NWuCZoa6f9YeWS02pT3vCX4jHuJBxTwjqyFcDQg+xQmwN7RkMPT
Zj3vMwk+KkKz581LxDJgfoL2Tq7XsuoaenqJWAyon6D+IFvSRlYva64H1PPUeWarnme2o2W0uo0i/G+n
DYHANe8a8l32rbSjAccIwA2u6SrSJk5cBIBq2aZ/YwMFCF11W1SUVgY54Z8N2qeYCblnye0EnUql0Hz4
69M9FMObYCEnOxEbJMBwu89jkDqjBoIB2yKBG67Y/U5luRAUHjBWYFAJNB8Jt22cDFzT8JhJYPUFCjhI
JfQh9cV9Si0turOZu387NE8P7k3SJma/nN/fZOq8576NHIHfDL3qkQfPL9fgXaYNqg3VUBQFvElCbQKH
v7XTu87W1IsItfm2Ag/nyj2+WSYTiu/5cJsiSbWqaq42dn/FRyBubNdOCRRlKNzYTt+DdC2ViOMjVNyI
gHZ/rRPPke5502HQ+j214fh0bt2zhmcz+qKfcV9cPAhIt3w3U7zK9Y6kVuXV0UZPeRaeV0l/6R8tVczY
N7PlLXi2V6HTp16nr1e/bqCAT5zq1OhOifh6Ab95/CPrlxZbhjpMLz6QkWoDRdASD4RlAdcL+ANWV0fH
vG60NufjDK4XyUnACm6AsQR+DwSrq+OA+RWuF6d69UOD4tb9tLDW9oV3ZbTGp3cVHuCOE8ZBViiG/UR8
Pt9ZutMkJX2vK96gL0acXMg67PhpzmlJL3CM1vkz4/TIzh8FtrxANVrfU6qZ+fPHgC3h61d4DPZnszu0
z89v/zib1lfQz+sp+j8AAP//7xs2maQIAAA=
`,
	},

	"/": {
		name:  "/",
		local: `ui/static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"ui/static": {
		_escData["/deck_list.js"],
		_escData["/index.html"],
		_escData["/main.css"],
		_escData["/main.js"],
		_escData["/review_session.js"],
		_escData["/stats_list.js"],
	},
}
