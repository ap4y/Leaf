// Code generated by "esc -o ui/static.go -prefix ui/static -pkg ui ui/static"; DO NOT EDIT.

package ui

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return []os.FileInfo(fis[0:limit]), nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/index.html": {
		name:    "index.html",
		local:   "ui/static/index.html",
		size:    1018,
		modtime: 1555475082,
		compressed: `
H4sIAAAAAAAC/4xTS27cMAzd+xSsFt2lQtBNEcgGAhRddVGgJ9DI9FgdWVJFetq5RHvHnqSQ5F+QBMjK
4jOfHvlIqXd9MHyLCCNPrmsalb/gtD+3Ar3oGgA1ou7zAUBNyBrMqBMht2Lm4e6T6Jr6jy077D6jucBj
jErWuP5z1l8goWsF8c0hjYgsYEw4tOKc+IMhEpDraAXjb5Y5fgN10ta/ylWyFp6Pp9DfwDhNVPTWu72+
gu1b0aO5kFgTTPCsrce0pGUL7ktj9KDkeL+hs9vYXy3xdkEG7lxGOiVnt4hJr6+rV72twoRENviDEOoe
0xpm4OMeAOQiHkBR1H6TziIZOOapUzqG31I4JyQ6UuOCPacruYtWE3NFK5A9XxtdyofnjhXPis7PGYlz
jyup7EVWzU7u6UNIUyFYH2f+EtIknnRU4D1BgJ45DMHMVE4mTNEhYyvCMAj5ArWuCM2nybKAq3YztuLf
3z8C5LH3XMexrlg0E9Ls9gkv4ROVzVnt6Rem76wZRffenyi+MKAt24SU0PBjIb2Sr2TcB5IHsK5Ub691
1fOC11Unk2xkoGSW9/GjjrjAXaNkfen/AwAA//+5AcpD+gMAAA==
`,
	},

	"/main.css": {
		name:    "main.css",
		local:   "ui/static/main.css",
		size:    2642,
		modtime: 1555564061,
		compressed: `
H4sIAAAAAAAC/7RW0Y6rNhB9Xr5ipH25KwUECSRZ9qVVv8RgE9w1NrXNDWmUf69sINjAdtuHqzwA4+Mz
M2dm7EQXqeEevDSoD68U6zqHUxy3/UfwUgmuwwo1lN1yUIirUBFJq2lF0b9JDvvEYhnlJKwJvdQ6h0Nm
bS3CmPJLDvu9+X4E1ledGHcOQ3pYMxxP1tYgeaE8LITWopl4R55IU83IgivL1lzn7Fuuer/gOaRrnix1
ebRoc8g2w/TTPSyo96c1dbqmPmxGnaQudbqk/roWFnUdbYVgeM397lC3O7DPjo0vYnopmCg//+qEJqOh
ldNbhBiRevrgMyQqRD+9VkJos6SGpvu6Jo5rB8pIpRdARjeoPKHmmA1ybMuRaijWSyEkJjJU+sZIDkow
imdrKZiQOchLgX7EO/uLkuxtBoyDE9ufq6PqijEL1bWOc4NNHFwp8FrPzwIvCpy8L/aY9QKVnxcpOo43
A43Pb+4sZm0PRzdliTDt1Fj+UcZleK0kXvCDur9KtDHvdV6vVVX9p1wmYx+qGmFxHbwc2x5iP6DUBrSd
9L+2syeHN/B+h7vF2xj8Q+yelMPk+x1pTUnbAxZaE7yh59pvuzEQXowdm8erY/NwC+aN3cbQR9IE/jwf
nAUzTk/7oB3kDCkdljVl2NVxy2403TDPSTmLG+nFJrffGoIpAsQYII7hR0P58047xW3/ZjZOF95cvvGI
fASPICgEvsE9AJh7AnVafAQAUxOmf2TH4+/GMndoDq+kJFWVmjACjn5aDkxVy9Ath4qR3mwwzxBTSUpN
Bc8NZddwu6dBlG9v+rNTmla3sBRcE65zKAnXRH7Dh+C+jBgeAcp/UkVNH93njCiviaTabouMF0Q5kRbh
HlfRMTmTZpn3taaaWOPGcWKs8wza1k3O6Q6S93QH+yTbQRztszeI2x7SYZh3X8CSAWVG/jR0chApohQV
/P9pDYAYvfCQatKoWUyXrxKy2SJ1Ma+Ut522KP+qfYoWysGcrEXjgjuazd/eP65GcKFaVJLBsSSqY4ND
TXod2iz8+DEpP0NGlfY7+MMrpPkymOnYHnz725FbfC+PRxCM986i/fEZE/JuAP8EAAD///MPhg5SCgAA
`,
	},

	"/main.js": {
		name:    "main.js",
		local:   "ui/static/main.js",
		size:    4530,
		modtime: 1555567541,
		compressed: `
H4sIAAAAAAAC/8RY3W7bNhS+91McsMEqoa6SbndxFCBDV3RD025Lb4ZhsGnpOGJDkxpJxTUMPcWwuz3d
nmTgj37jOF5veifx/PDwO+d8PFLGqdbwGrO7d0wb2E0AqN6KDBSKHFUUuyWATAptIMfsTkMKdEOZAVMw
ncxXaLLCOtBRPHO6ucyqNQqT3KL5gaN9/H77Yx6RPGxD4oQJgertx+t3kHqvzhIg0VKZKKJTWMaQXgJN
BF0jXMLSPcSN2pqWUXgGiHZghVPIqMr1XCHNt1MQ+NnMFd4z3Mypgdr6a00AFhec+fcLCoXCVUqeneys
n5qAFBln2V1KaFkm2lBlblBrJkX0POg8j2eg0FRKwIpyjTNyGSQXpzT4zWSOlyc7j5OP5MZQo6NRnBt4
TQ1Gw4DjuL44dR4mF6ecXS5C7C0EnyQTESEO9HrSJm6QkJC9EOiGiVxuEqfgs6FJnJgCRaRQW7h3wTlb
gV1K5F3cGNvXT1oKm+Wg1ZMY/Gyi4Ms+u9xxVCZavKGMYw5GgtvYp/scTnZWr17EoWrq7iADrHrZbI7j
o6P5Fi7hrBcgzbchtlCubLWC1JnCyw7nsKH14jQu4NXZWeeH0HvKOF1yBCE3JHjkaCAPzkKZQwq/ByTI
GYEXkNuK91tMB4LISa6lMEUUwwt41clbuzcV578hVWNbJ3wrK6X3Sq6ZqAzqyJfFH64xMrkupUDhstC+
JJqzDKOX38ZNBsOB8yA5m8J3cSirhNg4Cfh9vLwVnjdFV08mnkB+9QnzPeKy5DKgqszIjkRcIzB9JfQG
FRO3kIJRFc46oa0NC3LFeW9VB7+doFfvI6J6lHyYKCvzRqo1iRMpdLVcMwMpYL/sMSkV3qMwr3FFK26a
UvHFMg4/bu1CnHOFWvJ79BqdcQ3INT7QtqX0S4XaMN9VQdl3Q0hRH5XQvgXTRqqtpSWDTnYE7Y4ot3W7
F+U+vQ/IrzWLe3bzqsypQdutobd8Ew+WB9fIDv4Mx56CkYbyKXBcmSlQB9w7FFA3QYaoAhw2DVYV0jS1
rd9AOoJmSbO7DlFf5oFlJoexKpW8Vaj1CK/Fyc4FCi9dpPVpeK8XT2DfHHTkr1meHVGzJE602XJMNiw3
hQ+mBarOiqdC8LouD6MoyDdiqUvyhH0mlcLM+KL+Ig/NMe4pr9BaHWuwklmlowc33LBx+uSyv4bdvfPe
3VCzI4nokaIOAYz6fFDcHm471hwFx+yBqdvzkP0goX37QaYOeRiltM81Q1T8aNPbQqGuuBlzhCPTgIaP
rnfHepOE6XnYtmvb3kmGZfXvP3+R2R4l3wiZ5NKej9wqRNEqDk71eJmO2PhADH8fE4PC/IgIAghBoeGi
YVUNqNax7L7xrRn//BS3cEanJzurXy+mvUtmjaaQ+TmQnz/cfCTN7dKOj/vGvmMHv/8/+rkw3QgWWvTh
ADgYAfuzrO/cQ6OsJYSvMMm6wbKh8oMTbZPhPY3ydI5JoBvyeHan7fpS5ttz+Onmw/tEG9vFbLWNdg0r
ten/anXg5y4fzqEaaEfLq7J0cY3mvFAAUpSy1IExo7h/CH8hFHIz+DgdDFYPpJ7kCqqLbt7iMqM2wYld
nk32jBsKS06zcFns6ikQ6/SqLMkUyCnpcaF1EYe9+91u1xs3EXlm7UjclU8vzqfG3OarzrNUznTJ6XYw
Uj9qGjpzjzERUiCZjf4EuD8Gqf+uCq/tL4DwnjRZ647yGMmNMC0rXQRAnTeop7Dwnxm2bBq6Wzxrno/5
+aCfONsXQNPh6oHpfavgZvhd1IATVEbY2IL3U0BZBuursrRSWpY93f8CAAD//wkqcQWyEQAA
`,
	},

	"/": {
		name:  "/",
		local: `ui/static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"ui/static": {
		_escData["/main.js"],
		_escData["/main.css"],
		_escData["/index.html"],
	},
}
