// Code generated by "esc -o ui/static.go -prefix ui/static -pkg ui ui/static"; DO NOT EDIT.

package ui

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/deck_list.js": {
		name:    "deck_list.js",
		local:   "ui/static/deck_list.js",
		size:    1494,
		modtime: 1563254870,
		compressed: `
H4sIAAAAAAAC/3RUTW/bOBC9+1c8cANUQq3PqAiSSD4U3SIL1KcuCiwWi4QRaYs1TRoiLdkx/N8XlGjH
yW7BC8l58+bNcIZ8t9GtBeMLupUWtaTG4AuvV9+EsThMAGr2qkbLFeNtEA5XQK2VcV71yqAC7amwsI0w
8eOC27pxBCYI7wcs0/V2zZWNl9z+Lrnbft7/wQLCfBgSxkIp3j78Of+GamQdPIHY6NYGAZ3iOUQ1A40V
XXPM8DxswhNsTTeB3wPBAc44RU1bZh5bTtl+CsV39rHlneD9I7U4Or6zC/BUSjGblBRNyxcV+e3q4DiO
BFrVUtSritDNJjaWtvY7N0ZoFXzwmA/Tq8NFqGN4j5bbbauwoNLwezLzwDKhs0nJROcCl7VmfHZ1GMs2
CvtuqTXBO9k9vlDLg7f6w/BYJgPDpEwGxpKOr1cR41giKdSKnLIZr36RU6N94HNC/83ACTbdEru1VKYi
jbWbuyTp+z7ur2PdLpM8TdPEdEuCXjDbVCQvCBoulo0d9074Z72rSIoUeYG8IGP9yw21DVhF5tktrh8+
1VEWZ0ijHPFtlCPvsqJOkcVZfIvcrSYr6gGCPHJ3Uf7jU506r8h5uPUyv0V283DTRTdN3t28rAukTZT/
cKcsPR27qGjyrnghyXslKdImL7q8eEhfCBZCyooorfiILF2irvDuORMpZk++kc79+FMLFRAyTMBxMgHe
zIUfIl/iXiim+3gAjENhSBjbhqug5cZ1/cHTigXcVaxX4cnZHX8ardywedSFxfKdDTyX2w8jJHlrg6ev
VEjOYDWGwOPU3eHq4HDHp9AP7/EihcsevRiqUzqjOsr2mCG9EEjZ3mvzv4ZYLFANrohe+9sHdCwDokSW
pq88hHZUSPosOZTuiWeU3IJ5Mv/boMLfvhIkJfgI5j6eMcT0jSEYLHOtbBOE+Ijs1X72+7qV8i9O2/e+
g/FBb1vzv5a5UFvLTTA2xD/D/1Tr9UYrroZXOB9iI0XNgygPTy/oE2bekk5xHfqGionTSTDGGe1n492p
3Y6TfwMAAP//Bhwcw9YFAAA=
`,
	},

	"/index.html": {
		name:    "index.html",
		local:   "ui/static/index.html",
		size:    1815,
		modtime: 1563325307,
		compressed: `
H4sIAAAAAAAC/6RVzW7bMAy+5yk0HXbLjKI9DIVtIGgxbEAPw/YEikzHWmXJI+l0eYntHfckg2T5J026
FOjJIvVRHz+SsvJ3ldd86EA03NpytcrDV1jldoUEJ8uVEHkDqgoLIfIWWAndKCTgQvZcrz/KcjXssWEL
5T3oR7Hpujwb7GHPGvcoEGwhiQ8WqAFgKRqEupCtMu6DJpIiJFJIhl+cBTuSZwN7WG59dRDaKqJC7pBl
OtupvTBVISvQjyRHgPaOlXGACRZ0XMXs6DbPmqvJ29sp+sEQTwcEx9oGT5lnvU1kmVP7UXBlBmICIuPd
gghUBTiawXE9G0KEJG5FTp1yE3UgCY4lLt/i0vyKfodAtAztku80PM9m0qGIIaPREWo+Ck3pi9OKxZpF
np89EAeNY1BsbmANlZzhtcc2BhjX9fzJYyuPFEX3DJBC9exrr3uKK+3bzgJDIX1dy+xM6DAi1G9bw1Ls
le2hkH///JYiW2oPeSzz6iInAvV27nAyj1imyipHT4DfWTHI8r3bUnemQRNae0TQvIlBL+DzrJsbEhow
jlRlTkeKFdP/B+r5FMWQ9dEsLWcgHT72PIIJLGheo386LkJzU94prMKkZc3NseIYMhM+pAsy+Jdio6rX
zN/5ubsu73pEcCxCD0jUHk/EaoXVM7HzCeOVTaY1SzMoYfRuVz4oYvEN9gaeoBIbDprT1jP8yI0JvOGz
lzY7ZnqR+ItjwL2ylwlNQr6J7t7UtdG95cNlwmrCvonysyH2aPRrNDYT9jLl/Ds+e5PCIjwVw6NBGk3H
glCnl+bH9NC0vuqHn9gAKld5NjyD/wIAAP//bBKeSxcHAAA=
`,
	},

	"/main.css": {
		name:    "main.css",
		local:   "ui/static/main.css",
		size:    3274,
		modtime: 1563245950,
		compressed: `
H4sIAAAAAAAC/7RX3W6rOBC+5yks9eZUCggSSFLOzb6KwUPijbE5tmnIrvLuK2wINvi0uxerVqoznvnm
/4ubXKRGf0cItXiI75Toa4lOadoNPyOEGsF13OCWskeJFOYqViBp87pS9C8o0T6z2oxyiK9AL1ddokNh
hR0mhPJLifb7UfCMjMNrZnw6IPkhAHI8WWGL5YXyuBJai3bGnqASTTWDNVxRBODOxfdw1/0a6pAHoIrc
g9KiK1ERjtZP/LCG358C8HkA/hCOPstd+HwD/1VzjN59ElaCkQD+hwPf7ezfnk0HMR8qJurbr15omASd
nE8JZiD1/IEvKkklhvnYCKHHKzXN4pJ2+l3HnGBcYwaNXmky6ioEC7jkYVSn6Z3AbCcRqoQkIGOlHwxK
pASjxBHXgglZInmp8I90h6bfJCveHaVp01Lz45ZY9dVuPnVuDKNy5ijWgmxrfavIegCyj5WRUahwfbtI
0XPyu3jT87u3v0U3oKOXv8SE9mqakLms6zA7CX4WWf7/F3EuwzbLt6Zp/mVaL+kQqysm4m49HbsBpZvA
chtYuAZfboBfHY8sVlvhNjVEGofUo1y7PquZNbKsGxARWgMJF3jrvgstjhdrz5ZF7NlCDIJ5CxogjESO
4b+4xbkYt+4lt0VEJcNKx/WVMuIWNCQfixsQL1k5l6H80jG5P1ogFCPMGMKcoB8t5a+vyVPaDe/G8vUt
6rRyJtln9IyiSpCH42OcENxrMd7Pk5nXxfGIf3pjW6I3qKFp8jGUiONPg0Go6hh+lKhhYHmcwRATKqHW
VPByhOxbbmxaTHnY6M9eado84lpwDVyXqAauQX6Dhw3YOuZnhMtPqug4Us495VeQVBvDZPSDKQe5YbXk
mJ2hXWd+v1INv6cbdy/NFGfnfIeyj3yH9lkxzvK+eEdpN6DcrvjOtCesmlnNkQxOdqijRIFSVPD/VnGE
MKMXHlMNrVpK6uI1QrYhUFfnjfKutxP1mwdVLK042xaOC+7UbfnsveZawYXqcA3WsQTVM+tQw6Bjk4Uf
P4H6FjOqtD/HHpumlpSUnnnd+vbNp6/hQPqLDi4bKpWORRPrRwfuerqJ+0aEfm5fAHbNfMVEaaxVzCi/
+aFQbhh17nKwlyv8QBzq82IJmzLmLUk0OVbAoNaxFPfwdH3t98VPSSFn5xvc6SW40I3VHg/GIvASKNEb
OROAD6Pw9qsHpecF8F6KXMgWM6M10aOqJQCfGHL5R6JIF4bc9P+rJXpGvgn2yXWegZ4r0DPH/hMAAP//
H15l3soMAAA=
`,
	},

	"/main.js": {
		name:    "main.js",
		local:   "ui/static/main.js",
		size:    1420,
		modtime: 1563254710,
		compressed: `
H4sIAAAAAAAC/7yUwY7TMBCG73mKkZdDLBUvZ6IgFcEBidPugePWSrzEbGpbHpcoqvLuaBI7TdptQRz2
lo7n/8f+ZqZ676wP8EVVL981Bnj2dg9M3NeqenlqNQbxC1mRxbQH9Vur7lEhamvmXD9Gn3AKrwSPQQZc
GSNFFs5Z1UpE2DoHxwzAK1Mrn/PxB0CnTW07YY2zjpQKSsg5lJ/iOUBoNApsbEdPwJwXY3wosuz6aWUN
BmgkNlCmEq2tZKDrU7hYFm80But74ZVrZaXoSSo/DhtgZLp1jm2A3bPorZ8hJwuBQfqAP3RocnY3vppx
fnntkdCkiAVS+nvyZTz6Eppw8Ca+b1WLRzuqGJtz7rjwGgjNgkm8U22rw16ZIH6q8LVV9Pm5/1bnjEYB
GRcY+laJWqNrZQ8lmEPbFrelcSReETNjjWJ/k0/UboqnXtZpfkswqpvHOTU8HYs0XicOS2aUtoFK+hof
lKz7hIY4n6JQliV84HM/XpsVd8AmDspYHIYN7Kbt+QjvjhQadhvY3aVvXvxfE/6N49U2nHo4cYyZEeNq
3RPLtOaXKOdppsuebfBNMKNqzWXagLehc2XKLthQXiQz/6/NVChwxmTIsvh66VwUbp2j41N8ofkTAAD/
/0bvYaeMBQAA
`,
	},

	"/review_session.js": {
		name:    "review_session.js",
		local:   "ui/static/review_session.js",
		size:    2709,
		modtime: 1563254837,
		compressed: `
H4sIAAAAAAAC/8xWzW7TQBC+5ylGVoVsKbicGxkJBBWg0gLpvXHsSbJ0sxt2x0mjyE+BuPF0PAnaH/8m
TSJOnFrvzux+3zcz3wafVlIR5DhLC06Q8VRr+IZrhpsxas2kgN0AIJNCkyoykiqM7AoALZiOmX4j9AYV
E3NIgFSBo2Yzx+wREhAF561V7c9tNsrBACDVW5GBQpFjc0cus2KJguI50nuO5t+32495GDCxKuhaqmUQ
xVLoYrpkBAkgJK99KgDGK4VrFPTOsQujkd9hMwj78KM6z+N8UKglX6OLaJJLQK5xL1rgE30tUBOTohVs
/5ajwZ4qGyZyuYkXTJNU21hTSmj3RseZm5AgipkQqD7cf74xslfHHlQ53aSMPEhNqSJf2LBOi1p5D8Uq
TwnHBo6jYavTXfbkbVfADn542kMgSSkfAscZDSG1wt2ggLIC6VF5OUwZTCgkSQKvmgL0pJmm2WOjqEIq
lHBf5eC4Visl5wq17uk1udhZoPDSIi0v/Xc5OaF9RbR3XrU8OqNngyjWtOUYb1hOCwemFqrMFqcguFhb
hx6K4IWY6lVwIj+TSmFGrqn/6YSKxjrlBZqscxNmMit0q6fcxPcGp20uh3t4hpQtbvGpnufTRvRMU3sA
vTnvNLeTG5Iz5Rjtpdo7j+V3CtrO71Tq2Am9kra9pqvKLOW6A1GhNq7f8whrpl4Nh87jMvPqUmKmH/y1
zdi2mHTb6s/vn8HoQJAbhExyafgFc4Uo6sAOq+fbtOfGRzD8OgeDwvwMBF4EH1B5UWWVHZO1/urhOevy
9uYviW07hxObdHmxM/HlZNh6XpZIC5lfQfDlbnwfVO9KVOXTAoWpSvvlq0sVy8eoutZ8ftfucarjmr16
yZxpp6uzYm4xy+aalKOicHKdMo45kAQLHgRuwI/sFVzsTHQ5iZqnsPWatGb4kDZelMBYQxAdpHgewQP0
+uROULNIwACpbX6fXJvaofE5Xf/Am1DwfOWH9fpU5tsr+DS+u401mdlms224q7yqbo3/rEfcbzQH8lh/
lIO/AQAA//85Ru3JlQoAAA==
`,
	},

	"/stats_list.js": {
		name:    "stats_list.js",
		local:   "ui/static/stats_list.js",
		size:    1544,
		modtime: 1563338355,
		compressed: `
H4sIAAAAAAAC/4xU0U7jOhB95ytGUa/k3AsBVX0CwtWu2BVI5WXZt6raWMmkMRi7sieUKuTfV7Gdps3C
wlOSmTPH54wngy9rbQgKLHktCXLJrYV74mTnwhI0RwDcblUOBlWBhsUuBECVsEmB+SOksBGq0JukEpa0
2SaWOKHLXThoofP6CRUlK6RvErvXr9vbgkUd0J50wChOhFJobn7ezSEdyC+OHEOulSVwcEiBb7ggj/lV
IuWVk8tif5oogTlkIlGtqII0TeEsBoNUGxUIffFar2vJCe9RYk6+KrB4gPfs6V12cbaMA8XfXXXNi+JE
q7ziaoWQAmuAuFkhQRtDehXauO8NUm8xKYUqGGsg56YIaPfaOfEcyTOXNQat76kN6bZ7tJ3otw0HJZ/y
s39JLh4EJE98PVKcXeo1Ca2uJk0XbS9Pw3cW90UPWigWRfEgcN+CZzsO1972On2/hCI0z1xCCnecqsTo
WhVsOoN/PX4R3QZEtAx9OCy8JyPUCtKghe0Ir1KYzuB/yCaNYy6l1mZIn8J0FrcFZHAOURTDf4EgmzQ7
zD8wnbVV9qlBOelMjjrbhT74dQw+C9xg8WV8Kwo3cM0JWdAVujHnln4MNUuXjRPSc51zib4b/S/07qm9
w9GZhz39gKMQZSnyWtL2rXlaRNdDfvkBlV84Iv9D0Mj8zYBbwusrLIL90fDu7s8PcP85Gtdj2BtYvxoP
ttDBmBocFlbYkg7LMiftdNLsVl2b7S0wgzbRj/3SCgRd8MFqxfoVxCUaYtl3LiQWQBoct3d9DpNmKCN8
IRbvjgi0qpbSW2mPfgcAAP//PAD0PQgGAAA=
`,
	},

	"/": {
		name:  "/",
		local: `ui/static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"ui/static": {
		_escData["/deck_list.js"],
		_escData["/index.html"],
		_escData["/main.css"],
		_escData["/main.js"],
		_escData["/review_session.js"],
		_escData["/stats_list.js"],
	},
}
