// Code generated by "esc -o static.go -prefix static static"; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return []os.FileInfo(fis[0:limit]), nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/index.html": {
		name:    "index.html",
		local:   "static/index.html",
		size:    903,
		modtime: 1547966353,
		compressed: `
H4sIAAAAAAAC/4xTUW7UMBD931NM5x+sVqqEkBOpEuIbiRO4zqQx69jGM1nYS8AdOQmynU3DapH65XnP
742fJ46+G6KVcyKYZPb94aDLCt6Elw4pYH8A0BOZoRQAeiYxYCeTmaTDRcZ3H7A/tD1x4qn/RPYITylp
1XDb8y4cIZPvkOXsiSciQZgyjR2yOS7ZvLfMCCVKh0I/RRX8BvdsXPivV6uWvZTPcTiv/QpJuYECH/uy
luQfQXMyAdzQ4UD2iL1Whei1mh73hi85vmRi3hvSyt0wtSDlzHWOxoWt3eBO1c/E7GJAsN4wv+KLsJx8
X5XfF2KpW1pN92vTKhhjnqvEhbTI55jnnR1AV/pVgGAWiWO0C9fKxjl5EuowjiOqG9Y2ZV6eZycIJ+MX
6vDP718IO7VWJcc+1+WOmXjxsl1xhf+ck6rQBP5B+asYoXLLdENiY85k5akqr0RaDe60TbiB63mPLjie
aNjSbMR+4g99iDDHTGBNHvhOq+nhqnErL99Uq/bUSsk2uyTA2a4v9Vt7HZXuD1q13+5vAAAA///fMQ4P
hwMAAA==
`,
	},

	"/main.css": {
		name:    "main.css",
		local:   "static/main.css",
		size:    646,
		modtime: 1547966345,
		compressed: `
H4sIAAAAAAAC/6xS3U7zMAy971NY+q47dd80CWVPkzVuY0jsKnFhA/HuKOlg3YA7LnuOz4/deLQOE/g9
vDUA0aaR2EC32WOE7tC8N020xJX0SKNXA9uue/aHOn1qP8HdA8aCOcpTsGcDQ8BTAR7nrDSc215YkdVA
j6yYClVGWkcJeyVhA72EOXIN3WTMmWQJ/ub5mxDABhq5JcWYr0lrP79dLdoeRVWigf9L+UFY25fLRiwp
2vAFZ3pFA7syuPYbJMWfS95FbO+VxNOsVTpZ54jHy9kP6/9wK/l31Rxt/zQmmdmVpoxFdZTkMF2/a+/B
RgpnA1FY8mR7XCwT5jnon533YjfdvqKFG4gpe3SVUzxpW23WBh8BAAD//4dUNqiGAgAA
`,
	},

	"/main.js": {
		name:    "main.js",
		local:   "static/main.js",
		size:    2318,
		modtime: 1547966947,
		compressed: `
H4sIAAAAAAAC/9RWzW7TQBC++ylGqwrFUlk4NzJSEVSASgtK741jj5Olm12zO24aRX4KxI2n40nQejeJ
7eZPcOKU2PPNzDez8806k6m1cFmWsIoAMq0smSojbQZx8waAZsJyYS+VXaARagoJkKlwGAHUUQRgUOW4
hec6q+aoiE+R3kt0f98uP+YDJlRZ0ZU2cxZzrWw1mQuCBBCSN8EVAHlp8BEVvcMirSQN4mGwiAIGfSbx
xi+wvDdotXxEj9g614DS4jO0wif6WqEloVUL3PzWwyg6hGxKT+1SZdCzhjRNK8FSSggJpItUUAhWIGWz
G3zaVHegw8f6yWL+mMrKpWDMO6RNmJFLzIVSaD7cfb529hdqYssAyrQxmJFPuRt2OHuO2QOLO55NrdwZ
jjAvjZ4atLbnPz5b+RCkKZXwMpyHfyexoPpVB1GPA0k3G1sUJEkCr7ezsZeGRWuFVizmlpYSeS5sKdOl
64HSCtnwWIBCKGFnmO+KMJE6e9iEMEiVUf6pN4x/Q6+Q+PRv9FoF1kdO+nuY7J2nvTaeOKuex0LkNGsf
uB/Za1R1Nhv31dXTdEde3hGSE1UyfOY6Cvrc69+Csbjt31HQoQgdoIuxT/NFKm2HokFbSeptD784Qzc8
u8DLycC7cGHvQ9qtDvbuhd+/fmyGqQ3yh5VpqV19bGoQ1QZ4wgLZMewHOPw8hYPB/AQGoQkBsJ7y7lS1
lnBg5zUKjWHA3E5nMacZKtfU9iUV+sz1Q7x2co/frL8bNpK3nJr4Poj776KkEg0NxlepkJgDaZ8QXD5Y
q+kCzlYOX4/juLtCQAkZCnp2De2ajJ21BUWx801Jc6SZzi+Afbkd3bHz8Hai8+UFfBrd3nBLbkhFsRys
1qKr48DjP2hSHUVB9WUJCShcuE8eRyQtS77+ghlGfwIAAP//ViMLzg4JAAA=
`,
	},

	"/sakura.css": {
		name:    "sakura.css",
		local:   "static/sakura.css",
		size:    3353,
		modtime: 1547954048,
		compressed: `
H4sIAAAAAAAC/4xX32/bNhB+919xyFBgCyRZtmPXUdBh6IDuacCADdtDkQdKPFusKVIjqVju0P99ICXq
d7JVQC3dxzse777vpKzv4XdyqRSJMq3hZRPFUbyCe/gw+WdtvzLBCsLBrjQ5FhhZ629KfsHMJJAbU+pk
vT4zk1dplMliLWvCpTqvtdtiBffr1foePkp6s7e5KTj8swI4SWFCzb5iAodttH/35G0nUjB+S0CjYqcn
+LZapdZ34rOJjgoL68SZwDBHds6NNR82R2stSB1eGTV5Artjs7Ag6sxEAqQy0j5nkkuVwHcPxF7WkpLs
clayEjT04OnRXhYsCaVMnBPY7Mra5fVTgZQR+H6w1+H4UNY/uGS7rCd573c2cfj2SoTdcftfEXb7PkK+
CSDfBpDvAsgfAsj3AeQH5zUpzGZW4T9RUSJIAL+gwBcSgCZCh03d/dpr6/8+jq1NvqA6cXkNr4qUCaQK
ySW8SkUtaH8XgbDQ7j50Zo8SzjuvETB0y29ljkL3XQsL+XXBesX0wswcGBuaik25tI12e1fQ1SrfzsE4
9uBuzsL3nefDHOyw/RzbduBhBraILgjnAegqtf+V02Xv9++aAKpli6KoOuJus+Px8egWEIcbrE1IMZOK
GCZFAkIKHOqg9wAgSW5b3bLPr3g8brOD41G3XSqNkUUC27IGLTmjnZ7szlWj9VY6IceTo+JDe0DOHNwI
swsVd3jKZXb5u5IGB2c3N44JMEM4y3pZd7H3jdgnWzbGNufGtuszHtSKFec2p06RmzhuCr22gw+BCAo/
S4p2nJWqSW1pcmzsZbelTJec3BJw5xnPkiaxTlb1gKiZ3WPS8zh6HJ0vgRhif+Y3k7jmzGCoS5JhAqVC
J1S3jz3Dj9Dt1kdejmkUEbokCoVZiusr9QdJOWpbI2PvegoSzs4igS+VNux0cyEGdR4RmZNSYwL+zoU2
NACTTzLtKjAm5aZvcVuINrmPlTFS6ABOUhXadZSJsjI2XXcTuFyJQjLQ1ihgz3JofJOTzCrdOzbPrYIW
AgxIN9pryroodckG4H/dbp/NrcQPd7pKC2bunsdWhRpnxsb97tlt0lGSCfeamDNzX9awicv6adK3DIVB
9fTWQBlRQkhHtGV6tjUYDKH+fdv2UhHKKu0q97R6q5A2SKW0jVJK5pNMZW2l447UsaNu2tZW9jNl2lKU
PvsaDy1L1X4Nb+v+Guw70ON+vrZ5UzyRiptmwMqSZMzcEoj2o3Q9z/yjG9Q+cw+OsaUz+JWL2IJfe7Yl
Nw8tePkjL7l12PBVs0CShbfOEjRnEICsjKW3nWVDnQWgkWNmhvk0vZh/E3aCOAwEYedbjs70gsqwjHB+
a6WhnTBACvj0KQB2FlIhhfQGf7lPFDtiZq88H/fNCb5A/SnYqeXBq6UOdU6ovPbqfEsR49nlyzRv3vP/
HG5LTRhSIMsxu6SyvhsG7NbbeFQag+NpyUmKPACOZxQ0gBNDTjWa8VzrBtqk0tG+/bNh9HV7iF1u/wYA
AP//jnOwXhkNAAA=
`,
	},

	"/": {
		name:  "/",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/main.js"],
		_escData["/main.css"],
		_escData["/sakura.css"],
		_escData["/index.html"],
	},
}
