* Leaf

*Leaf* is a flashcard app that uses [[https://en.wikipedia.org/wiki/Spaced_repetition][spaced repetition]]
 algorithm. *Leaf* focuses on simplifying database management, ease of
 access and support for various spaced repetition curves (including
 custom).

[[https://raw.githubusercontent.com/ap4y/leaf/master/screenshot.png]]

** Getting started

*Leaf* is a [[https://golang.org/][golang]] application and you are going to need golang
toolchain to compile the app.

To install or update run:

#+BEGIN_SRC shell
go get -u github.com/ap4y/leaf/cmd/leaf
#+END_SRC

or

#+BEGIN_SRC shell
go get -u github.com/ap4y/leaf/cmd/leaf-server
#+END_SRC

Leaf provides 2 different versions:

- ~leaf~ is a command line utility that provides review UI in the terminal
- ~leaf-server~ is a web app that implements review UI along with
  additional features like stats viewer.

Both utilities have the following configuration options:

- ~-decks .~ is a path to a folder with deck files.
- ~-db leaf.db~ is a location of a stats DB that contains spaced
  repetition variables for your decks.
- ~-count 20~ is maximum amount of cards per review.
- ~-algo sm2+c~ is an spaced repetition algorithm to use. All possible values can be found [[https://github.com/ap4y/leaf/blob/master/stats.go#L57-L64][here]].

For ~leaf-server~ you can also adjust address to start server on via ~-addr :8000~.

** Database management

*Leaf* uses plain text files structured usin [[https://orgmode.org/manual/Headlines.html#Headlines][org-mode headlines]]. Consider following file:

#+BEGIN_SRC org
* Sample
** Question 1
Answer 1
** Question 2
Answer 2
#+END_SRC

Such file will be parsed as a deck named _Sample_ and it will have 2
cards. For a full deck example check [[https://raw.githubusercontent.com/ap4y/leaf/master/fixtures/hiragana.org][hiragana]] deck.

Spaced repetition variables are stored in a separate file in a binary
database. You can edit deck files at any time and changes will be
automatically reflected in the web app.

** Spaced repetition algorithms

*Leaf* implements multiple spaced repetition algorithms and allows you
to define new ones. Following algorithms are supported as of now:

- [[https://www.supermemo.com/en/archives1990-2015/english/ol/sm2][supermemo2]]
- [[http://www.blueraja.com/blog/477/a-better-spaced-repetition-learning-algorithm-sm2][supermemo2+]]
- Custom curve for supermemo2+. I found it works better for me.
- [[https://fasiha.github.io/ebisu.js/][ebisu]]

You can find calculated intervals in corresponding test files. Check
[[https://github.com/ap4y/leaf/blob/master/stats.go#L12-L22][SRSAlgorithm]] interface to define a new algorithm or curve.

Please keep in mind that algorithm variables may not be compatible
with each other and algorithm switching is not supported.

** Review rating

All reviews are rated using ~[0..1]~ scale based on amount of misakes
made during review. Score higher than ~0.6~ will mark review as
successful. Rating is assigned using [[https://github.com/ap4y/leaf/blob/master/stats.go#L30-L41][HarshRater]] which implements steep
curve and a single mistake will have score less than ~0.6~. Check
[[https://github.com/ap4y/leaf/blob/master/stats.go#L24-L28][Rater]] interface to get understanding how to define a different rater
curve.



